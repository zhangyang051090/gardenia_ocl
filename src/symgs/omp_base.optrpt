
Begin optimization report for: gauss_seidel(int *, int *, int *, ValueType *, ValueType *, ValueType *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_base.cc(11,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at omp_base.cc(18,3)
   <Peeled>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at omp_base.cc(18,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 29 
      remark #15477: vector loop cost: 4.120 
      remark #15478: estimated potential speedup: 5.980 
      remark #15479: lightweight vector operations: 31 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at omp_base.cc(18,3)
   <Remainder>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: SymGSSolver(int, int, int *, int *, int *, ValueType *, ValueType *, ValueType *, std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_base.cc(36,45)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at omp_base.cc(38,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between color_offsets line 39 and  line 10
LOOP END

LOOP BEGIN at omp_base.cc(11,2) inlined into omp_base.cc(37,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at omp_base.cc(18,3) inlined into omp_base.cc(37,3)
   <Peeled>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at omp_base.cc(18,3) inlined into omp_base.cc(37,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 29 
      remark #15477: vector loop cost: 4.120 
      remark #15478: estimated potential speedup: 5.980 
      remark #15479: lightweight vector operations: 31 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at omp_base.cc(18,3) inlined into omp_base.cc(37,3)
   <Remainder>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at omp_base.cc(11,2) inlined into omp_base.cc(39,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at omp_base.cc(18,3) inlined into omp_base.cc(39,3)
   <Peeled>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at omp_base.cc(18,3) inlined into omp_base.cc(39,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 29 
      remark #15477: vector loop cost: 4.120 
      remark #15478: estimated potential speedup: 5.980 
      remark #15479: lightweight vector operations: 31 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at omp_base.cc(18,3) inlined into omp_base.cc(39,3)
   <Remainder>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================
